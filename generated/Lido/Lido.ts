// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BeaconValidatorsUpdated extends ethereum.Event {
  get params(): BeaconValidatorsUpdated__Params {
    return new BeaconValidatorsUpdated__Params(this);
  }
}

export class BeaconValidatorsUpdated__Params {
  _event: BeaconValidatorsUpdated;

  constructor(event: BeaconValidatorsUpdated) {
    this._event = event;
  }

  get beaconValidators(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MevTxFeeReceived extends ethereum.Event {
  get params(): MevTxFeeReceived__Params {
    return new MevTxFeeReceived__Params(this);
  }
}

export class MevTxFeeReceived__Params {
  _event: MevTxFeeReceived;

  constructor(event: MevTxFeeReceived) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ScriptResult extends ethereum.Event {
  get params(): ScriptResult__Params {
    return new ScriptResult__Params(this);
  }
}

export class ScriptResult__Params {
  _event: ScriptResult;

  constructor(event: ScriptResult) {
    this._event = event;
  }

  get executor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get script(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get input(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get returnData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class RecoverToVault extends ethereum.Event {
  get params(): RecoverToVault__Params {
    return new RecoverToVault__Params(this);
  }
}

export class RecoverToVault__Params {
  _event: RecoverToVault;

  constructor(event: RecoverToVault) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferShares extends ethereum.Event {
  get params(): TransferShares__Params {
    return new TransferShares__Params(this);
  }
}

export class TransferShares__Params {
  _event: TransferShares;

  constructor(event: TransferShares) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sharesValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SharesBurnt extends ethereum.Event {
  get params(): SharesBurnt__Params {
    return new SharesBurnt__Params(this);
  }
}

export class SharesBurnt__Params {
  _event: SharesBurnt;

  constructor(event: SharesBurnt) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get preRebaseTokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get postRebaseTokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sharesAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Stopped extends ethereum.Event {
  get params(): Stopped__Params {
    return new Stopped__Params(this);
  }
}

export class Stopped__Params {
  _event: Stopped;

  constructor(event: Stopped) {
    this._event = event;
  }
}

export class Resumed extends ethereum.Event {
  get params(): Resumed__Params {
    return new Resumed__Params(this);
  }
}

export class Resumed__Params {
  _event: Resumed;

  constructor(event: Resumed) {
    this._event = event;
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakingPaused extends ethereum.Event {
  get params(): StakingPaused__Params {
    return new StakingPaused__Params(this);
  }
}

export class StakingPaused__Params {
  _event: StakingPaused;

  constructor(event: StakingPaused) {
    this._event = event;
  }
}

export class StakingResumed extends ethereum.Event {
  get params(): StakingResumed__Params {
    return new StakingResumed__Params(this);
  }
}

export class StakingResumed__Params {
  _event: StakingResumed;

  constructor(event: StakingResumed) {
    this._event = event;
  }
}

export class StakingLimitSet extends ethereum.Event {
  get params(): StakingLimitSet__Params {
    return new StakingLimitSet__Params(this);
  }
}

export class StakingLimitSet__Params {
  _event: StakingLimitSet;

  constructor(event: StakingLimitSet) {
    this._event = event;
  }

  get maxStakeLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stakeLimitIncreasePerBlock(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakingLimitRemoved extends ethereum.Event {
  get params(): StakingLimitRemoved__Params {
    return new StakingLimitRemoved__Params(this);
  }
}

export class StakingLimitRemoved__Params {
  _event: StakingLimitRemoved;

  constructor(event: StakingLimitRemoved) {
    this._event = event;
  }
}

export class ProtocolContactsSet extends ethereum.Event {
  get params(): ProtocolContactsSet__Params {
    return new ProtocolContactsSet__Params(this);
  }
}

export class ProtocolContactsSet__Params {
  _event: ProtocolContactsSet;

  constructor(event: ProtocolContactsSet) {
    this._event = event;
  }

  get oracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get treasury(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get insuranceFund(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class FeeSet extends ethereum.Event {
  get params(): FeeSet__Params {
    return new FeeSet__Params(this);
  }
}

export class FeeSet__Params {
  _event: FeeSet;

  constructor(event: FeeSet) {
    this._event = event;
  }

  get feeBasisPoints(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class FeeDistributionSet extends ethereum.Event {
  get params(): FeeDistributionSet__Params {
    return new FeeDistributionSet__Params(this);
  }
}

export class FeeDistributionSet__Params {
  _event: FeeDistributionSet;

  constructor(event: FeeDistributionSet) {
    this._event = event;
  }

  get treasuryFeeBasisPoints(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get insuranceFeeBasisPoints(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get operatorsFeeBasisPoints(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class ELRewardsReceived extends ethereum.Event {
  get params(): ELRewardsReceived__Params {
    return new ELRewardsReceived__Params(this);
  }
}

export class ELRewardsReceived__Params {
  _event: ELRewardsReceived;

  constructor(event: ELRewardsReceived) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ELRewardsWithdrawalLimitSet extends ethereum.Event {
  get params(): ELRewardsWithdrawalLimitSet__Params {
    return new ELRewardsWithdrawalLimitSet__Params(this);
  }
}

export class ELRewardsWithdrawalLimitSet__Params {
  _event: ELRewardsWithdrawalLimitSet;

  constructor(event: ELRewardsWithdrawalLimitSet) {
    this._event = event;
  }

  get limitPoints(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class WithdrawalCredentialsSet extends ethereum.Event {
  get params(): WithdrawalCredentialsSet__Params {
    return new WithdrawalCredentialsSet__Params(this);
  }
}

export class WithdrawalCredentialsSet__Params {
  _event: WithdrawalCredentialsSet;

  constructor(event: WithdrawalCredentialsSet) {
    this._event = event;
  }

  get withdrawalCredentials(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ELRewardsVaultSet extends ethereum.Event {
  get params(): ELRewardsVaultSet__Params {
    return new ELRewardsVaultSet__Params(this);
  }
}

export class ELRewardsVaultSet__Params {
  _event: ELRewardsVaultSet;

  constructor(event: ELRewardsVaultSet) {
    this._event = event;
  }

  get executionLayerRewardsVault(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Submitted extends ethereum.Event {
  get params(): Submitted__Params {
    return new Submitted__Params(this);
  }
}

export class Submitted__Params {
  _event: Submitted;

  constructor(event: Submitted) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get referral(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Unbuffered extends ethereum.Event {
  get params(): Unbuffered__Params {
    return new Unbuffered__Params(this);
  }
}

export class Unbuffered__Params {
  _event: Unbuffered;

  constructor(event: Unbuffered) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Withdrawal extends ethereum.Event {
  get params(): Withdrawal__Params {
    return new Withdrawal__Params(this);
  }
}

export class Withdrawal__Params {
  _event: Withdrawal;

  constructor(event: Withdrawal) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sentFromBuffer(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pubkeyHash(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get etherAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Lido__getStakeLimitFullInfoResult {
  value0: boolean;
  value1: boolean;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: boolean,
    value1: boolean,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getIsStakingPaused(): boolean {
    return this.value0;
  }

  getIsStakingLimitSet(): boolean {
    return this.value1;
  }

  getCurrentStakeLimit(): BigInt {
    return this.value2;
  }

  getMaxStakeLimit(): BigInt {
    return this.value3;
  }

  getMaxStakeLimitGrowthBlocks(): BigInt {
    return this.value4;
  }

  getPrevStakeLimit(): BigInt {
    return this.value5;
  }

  getPrevStakeBlockNumber(): BigInt {
    return this.value6;
  }
}

export class Lido__getFeeDistributionResult {
  value0: i32;
  value1: i32;
  value2: i32;

  constructor(value0: i32, value1: i32, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    return map;
  }

  getTreasuryFeeBasisPoints(): i32 {
    return this.value0;
  }

  getInsuranceFeeBasisPoints(): i32 {
    return this.value1;
  }

  getOperatorsFeeBasisPoints(): i32 {
    return this.value2;
  }
}

export class Lido__getBeaconStatResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getDepositedValidators(): BigInt {
    return this.value0;
  }

  getBeaconValidators(): BigInt {
    return this.value1;
  }

  getBeaconBalance(): BigInt {
    return this.value2;
  }
}

export class Lido extends ethereum.SmartContract {
  static bind(address: Address): Lido {
    return new Lido("Lido", address);
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  hasInitialized(): boolean {
    let result = super.call("hasInitialized", "hasInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_hasInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasInitialized", "hasInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approve(_spender: Address, _amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(
    _spender: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  STAKING_CONTROL_ROLE(): Bytes {
    let result = super.call(
      "STAKING_CONTROL_ROLE",
      "STAKING_CONTROL_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_STAKING_CONTROL_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "STAKING_CONTROL_ROLE",
      "STAKING_CONTROL_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getInsuranceFund(): Address {
    let result = super.call(
      "getInsuranceFund",
      "getInsuranceFund():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getInsuranceFund(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getInsuranceFund",
      "getInsuranceFund():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSharesByPooledEth(_ethAmount: BigInt): BigInt {
    let result = super.call(
      "getSharesByPooledEth",
      "getSharesByPooledEth(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_ethAmount)]
    );

    return result[0].toBigInt();
  }

  try_getSharesByPooledEth(_ethAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSharesByPooledEth",
      "getSharesByPooledEth(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_ethAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isStakingPaused(): boolean {
    let result = super.call("isStakingPaused", "isStakingPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isStakingPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isStakingPaused",
      "isStakingPaused():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(
    _sender: Address,
    _recipient: Address,
    _amount: BigInt
  ): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _sender: Address,
    _recipient: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getOperators(): Address {
    let result = super.call("getOperators", "getOperators():(address)", []);

    return result[0].toAddress();
  }

  try_getOperators(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOperators", "getOperators():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getEVMScriptExecutor(_script: Bytes): Address {
    let result = super.call(
      "getEVMScriptExecutor",
      "getEVMScriptExecutor(bytes):(address)",
      [ethereum.Value.fromBytes(_script)]
    );

    return result[0].toAddress();
  }

  try_getEVMScriptExecutor(_script: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEVMScriptExecutor",
      "getEVMScriptExecutor(bytes):(address)",
      [ethereum.Value.fromBytes(_script)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  RESUME_ROLE(): Bytes {
    let result = super.call("RESUME_ROLE", "RESUME_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RESUME_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("RESUME_ROLE", "RESUME_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getRecoveryVault(): Address {
    let result = super.call(
      "getRecoveryVault",
      "getRecoveryVault():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getRecoveryVault(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRecoveryVault",
      "getRecoveryVault():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DEPOSIT_ROLE(): Bytes {
    let result = super.call("DEPOSIT_ROLE", "DEPOSIT_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DEPOSIT_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("DEPOSIT_ROLE", "DEPOSIT_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEPOSIT_SIZE(): BigInt {
    let result = super.call("DEPOSIT_SIZE", "DEPOSIT_SIZE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DEPOSIT_SIZE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DEPOSIT_SIZE", "DEPOSIT_SIZE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalPooledEther(): BigInt {
    let result = super.call(
      "getTotalPooledEther",
      "getTotalPooledEther():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalPooledEther(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalPooledEther",
      "getTotalPooledEther():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PAUSE_ROLE(): Bytes {
    let result = super.call("PAUSE_ROLE", "PAUSE_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PAUSE_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("PAUSE_ROLE", "PAUSE_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  increaseAllowance(_spender: Address, _addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    _spender: Address,
    _addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getTreasury(): Address {
    let result = super.call("getTreasury", "getTreasury():(address)", []);

    return result[0].toAddress();
  }

  try_getTreasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("getTreasury", "getTreasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isStopped(): boolean {
    let result = super.call("isStopped", "isStopped():(bool)", []);

    return result[0].toBoolean();
  }

  try_isStopped(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isStopped", "isStopped():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  MANAGE_WITHDRAWAL_KEY(): Bytes {
    let result = super.call(
      "MANAGE_WITHDRAWAL_KEY",
      "MANAGE_WITHDRAWAL_KEY():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_MANAGE_WITHDRAWAL_KEY(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "MANAGE_WITHDRAWAL_KEY",
      "MANAGE_WITHDRAWAL_KEY():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getBufferedEther(): BigInt {
    let result = super.call(
      "getBufferedEther",
      "getBufferedEther():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBufferedEther(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBufferedEther",
      "getBufferedEther():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getELRewardsWithdrawalLimit(): BigInt {
    let result = super.call(
      "getELRewardsWithdrawalLimit",
      "getELRewardsWithdrawalLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getELRewardsWithdrawalLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getELRewardsWithdrawalLimit",
      "getELRewardsWithdrawalLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SIGNATURE_LENGTH(): BigInt {
    let result = super.call(
      "SIGNATURE_LENGTH",
      "SIGNATURE_LENGTH():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SIGNATURE_LENGTH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SIGNATURE_LENGTH",
      "SIGNATURE_LENGTH():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawalCredentials(): Bytes {
    let result = super.call(
      "getWithdrawalCredentials",
      "getWithdrawalCredentials():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getWithdrawalCredentials(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getWithdrawalCredentials",
      "getWithdrawalCredentials():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getCurrentStakeLimit(): BigInt {
    let result = super.call(
      "getCurrentStakeLimit",
      "getCurrentStakeLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentStakeLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentStakeLimit",
      "getCurrentStakeLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakeLimitFullInfo(): Lido__getStakeLimitFullInfoResult {
    let result = super.call(
      "getStakeLimitFullInfo",
      "getStakeLimitFullInfo():(bool,bool,uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new Lido__getStakeLimitFullInfoResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_getStakeLimitFullInfo(): ethereum.CallResult<
    Lido__getStakeLimitFullInfoResult
  > {
    let result = super.tryCall(
      "getStakeLimitFullInfo",
      "getStakeLimitFullInfo():(bool,bool,uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lido__getStakeLimitFullInfoResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  SET_EL_REWARDS_WITHDRAWAL_LIMIT_ROLE(): Bytes {
    let result = super.call(
      "SET_EL_REWARDS_WITHDRAWAL_LIMIT_ROLE",
      "SET_EL_REWARDS_WITHDRAWAL_LIMIT_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_SET_EL_REWARDS_WITHDRAWAL_LIMIT_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SET_EL_REWARDS_WITHDRAWAL_LIMIT_ROLE",
      "SET_EL_REWARDS_WITHDRAWAL_LIMIT_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getELRewardsVault(): Address {
    let result = super.call(
      "getELRewardsVault",
      "getELRewardsVault():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getELRewardsVault(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getELRewardsVault",
      "getELRewardsVault():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(_account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFeeDistribution(): Lido__getFeeDistributionResult {
    let result = super.call(
      "getFeeDistribution",
      "getFeeDistribution():(uint16,uint16,uint16)",
      []
    );

    return new Lido__getFeeDistributionResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32()
    );
  }

  try_getFeeDistribution(): ethereum.CallResult<
    Lido__getFeeDistributionResult
  > {
    let result = super.tryCall(
      "getFeeDistribution",
      "getFeeDistribution():(uint16,uint16,uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lido__getFeeDistributionResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32()
      )
    );
  }

  getPooledEthByShares(_sharesAmount: BigInt): BigInt {
    let result = super.call(
      "getPooledEthByShares",
      "getPooledEthByShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_sharesAmount)]
    );

    return result[0].toBigInt();
  }

  try_getPooledEthByShares(_sharesAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPooledEthByShares",
      "getPooledEthByShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_sharesAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowRecoverability(token: Address): boolean {
    let result = super.call(
      "allowRecoverability",
      "allowRecoverability(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBoolean();
  }

  try_allowRecoverability(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowRecoverability",
      "allowRecoverability(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  MANAGE_PROTOCOL_CONTRACTS_ROLE(): Bytes {
    let result = super.call(
      "MANAGE_PROTOCOL_CONTRACTS_ROLE",
      "MANAGE_PROTOCOL_CONTRACTS_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_MANAGE_PROTOCOL_CONTRACTS_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "MANAGE_PROTOCOL_CONTRACTS_ROLE",
      "MANAGE_PROTOCOL_CONTRACTS_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  appId(): Bytes {
    let result = super.call("appId", "appId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_appId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("appId", "appId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getOracle(): Address {
    let result = super.call("getOracle", "getOracle():(address)", []);

    return result[0].toAddress();
  }

  try_getOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOracle", "getOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getInitializationBlock(): BigInt {
    let result = super.call(
      "getInitializationBlock",
      "getInitializationBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getInitializationBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInitializationBlock",
      "getInitializationBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferShares(_recipient: Address, _sharesAmount: BigInt): BigInt {
    let result = super.call(
      "transferShares",
      "transferShares(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_sharesAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferShares(
    _recipient: Address,
    _sharesAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferShares",
      "transferShares(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_sharesAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  MANAGE_FEE(): Bytes {
    let result = super.call("MANAGE_FEE", "MANAGE_FEE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MANAGE_FEE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MANAGE_FEE", "MANAGE_FEE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  canPerform(_sender: Address, _role: Bytes, _params: Array<BigInt>): boolean {
    let result = super.call(
      "canPerform",
      "canPerform(address,bytes32,uint256[]):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromFixedBytes(_role),
        ethereum.Value.fromUnsignedBigIntArray(_params)
      ]
    );

    return result[0].toBoolean();
  }

  try_canPerform(
    _sender: Address,
    _role: Bytes,
    _params: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canPerform",
      "canPerform(address,bytes32,uint256[]):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromFixedBytes(_role),
        ethereum.Value.fromUnsignedBigIntArray(_params)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  WITHDRAWAL_CREDENTIALS_LENGTH(): BigInt {
    let result = super.call(
      "WITHDRAWAL_CREDENTIALS_LENGTH",
      "WITHDRAWAL_CREDENTIALS_LENGTH():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_WITHDRAWAL_CREDENTIALS_LENGTH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "WITHDRAWAL_CREDENTIALS_LENGTH",
      "WITHDRAWAL_CREDENTIALS_LENGTH():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decreaseAllowance(_spender: Address, _subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    _spender: Address,
    _subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getEVMScriptRegistry(): Address {
    let result = super.call(
      "getEVMScriptRegistry",
      "getEVMScriptRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getEVMScriptRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEVMScriptRegistry",
      "getEVMScriptRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  PUBKEY_LENGTH(): BigInt {
    let result = super.call("PUBKEY_LENGTH", "PUBKEY_LENGTH():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PUBKEY_LENGTH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PUBKEY_LENGTH",
      "PUBKEY_LENGTH():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SET_EL_REWARDS_VAULT_ROLE(): Bytes {
    let result = super.call(
      "SET_EL_REWARDS_VAULT_ROLE",
      "SET_EL_REWARDS_VAULT_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_SET_EL_REWARDS_VAULT_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SET_EL_REWARDS_VAULT_ROLE",
      "SET_EL_REWARDS_VAULT_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  transfer(_recipient: Address, _amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_recipient),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    _recipient: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_recipient),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getDepositContract(): Address {
    let result = super.call(
      "getDepositContract",
      "getDepositContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getDepositContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDepositContract",
      "getDepositContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBeaconStat(): Lido__getBeaconStatResult {
    let result = super.call(
      "getBeaconStat",
      "getBeaconStat():(uint256,uint256,uint256)",
      []
    );

    return new Lido__getBeaconStatResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getBeaconStat(): ethereum.CallResult<Lido__getBeaconStatResult> {
    let result = super.tryCall(
      "getBeaconStat",
      "getBeaconStat():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lido__getBeaconStatResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  BURN_ROLE(): Bytes {
    let result = super.call("BURN_ROLE", "BURN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_BURN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("BURN_ROLE", "BURN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getFee(): i32 {
    let result = super.call("getFee", "getFee():(uint16)", []);

    return result[0].toI32();
  }

  try_getFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("getFee", "getFee():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  kernel(): Address {
    let result = super.call("kernel", "kernel():(address)", []);

    return result[0].toAddress();
  }

  try_kernel(): ethereum.CallResult<Address> {
    let result = super.tryCall("kernel", "kernel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalShares(): BigInt {
    let result = super.call("getTotalShares", "getTotalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalShares",
      "getTotalShares():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(_owner: Address, _spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    _owner: Address,
    _spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isPetrified(): boolean {
    let result = super.call("isPetrified", "isPetrified():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPetrified(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPetrified", "isPetrified():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  STAKING_PAUSE_ROLE(): Bytes {
    let result = super.call(
      "STAKING_PAUSE_ROLE",
      "STAKING_PAUSE_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_STAKING_PAUSE_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "STAKING_PAUSE_ROLE",
      "STAKING_PAUSE_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  burnShares(_account: Address, _sharesAmount: BigInt): BigInt {
    let result = super.call(
      "burnShares",
      "burnShares(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_sharesAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_burnShares(
    _account: Address,
    _sharesAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "burnShares",
      "burnShares(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_sharesAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sharesOf(_account: Address): BigInt {
    let result = super.call("sharesOf", "sharesOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBigInt();
  }

  try_sharesOf(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sharesOf", "sharesOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalELRewardsCollected(): BigInt {
    let result = super.call(
      "getTotalELRewardsCollected",
      "getTotalELRewardsCollected():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalELRewardsCollected(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalELRewardsCollected",
      "getTotalELRewardsCollected():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class SetValidatorsNumberCall extends ethereum.Call {
  get inputs(): SetValidatorsNumberCall__Inputs {
    return new SetValidatorsNumberCall__Inputs(this);
  }

  get outputs(): SetValidatorsNumberCall__Outputs {
    return new SetValidatorsNumberCall__Outputs(this);
  }
}

export class SetValidatorsNumberCall__Inputs {
  _call: SetValidatorsNumberCall;

  constructor(call: SetValidatorsNumberCall) {
    this._call = call;
  }

  get _validators(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetValidatorsNumberCall__Outputs {
  _call: SetValidatorsNumberCall;

  constructor(call: SetValidatorsNumberCall) {
    this._call = call;
  }
}

export class ResumeCall extends ethereum.Call {
  get inputs(): ResumeCall__Inputs {
    return new ResumeCall__Inputs(this);
  }

  get outputs(): ResumeCall__Outputs {
    return new ResumeCall__Outputs(this);
  }
}

export class ResumeCall__Inputs {
  _call: ResumeCall;

  constructor(call: ResumeCall) {
    this._call = call;
  }
}

export class ResumeCall__Outputs {
  _call: ResumeCall;

  constructor(call: ResumeCall) {
    this._call = call;
  }
}

export class StopCall extends ethereum.Call {
  get inputs(): StopCall__Inputs {
    return new StopCall__Inputs(this);
  }

  get outputs(): StopCall__Outputs {
    return new StopCall__Outputs(this);
  }
}

export class StopCall__Inputs {
  _call: StopCall;

  constructor(call: StopCall) {
    this._call = call;
  }
}

export class StopCall__Outputs {
  _call: StopCall;

  constructor(call: StopCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _depositContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _oracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _operators(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _insuranceFund(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetStakingLimitCall extends ethereum.Call {
  get inputs(): SetStakingLimitCall__Inputs {
    return new SetStakingLimitCall__Inputs(this);
  }

  get outputs(): SetStakingLimitCall__Outputs {
    return new SetStakingLimitCall__Outputs(this);
  }
}

export class SetStakingLimitCall__Inputs {
  _call: SetStakingLimitCall;

  constructor(call: SetStakingLimitCall) {
    this._call = call;
  }

  get _maxStakeLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stakeLimitIncreasePerBlock(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetStakingLimitCall__Outputs {
  _call: SetStakingLimitCall;

  constructor(call: SetStakingLimitCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ReceiveELRewardsCall extends ethereum.Call {
  get inputs(): ReceiveELRewardsCall__Inputs {
    return new ReceiveELRewardsCall__Inputs(this);
  }

  get outputs(): ReceiveELRewardsCall__Outputs {
    return new ReceiveELRewardsCall__Outputs(this);
  }
}

export class ReceiveELRewardsCall__Inputs {
  _call: ReceiveELRewardsCall;

  constructor(call: ReceiveELRewardsCall) {
    this._call = call;
  }
}

export class ReceiveELRewardsCall__Outputs {
  _call: ReceiveELRewardsCall;

  constructor(call: ReceiveELRewardsCall) {
    this._call = call;
  }
}

export class SetELRewardsWithdrawalLimitCall extends ethereum.Call {
  get inputs(): SetELRewardsWithdrawalLimitCall__Inputs {
    return new SetELRewardsWithdrawalLimitCall__Inputs(this);
  }

  get outputs(): SetELRewardsWithdrawalLimitCall__Outputs {
    return new SetELRewardsWithdrawalLimitCall__Outputs(this);
  }
}

export class SetELRewardsWithdrawalLimitCall__Inputs {
  _call: SetELRewardsWithdrawalLimitCall;

  constructor(call: SetELRewardsWithdrawalLimitCall) {
    this._call = call;
  }

  get _limitPoints(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetELRewardsWithdrawalLimitCall__Outputs {
  _call: SetELRewardsWithdrawalLimitCall;

  constructor(call: SetELRewardsWithdrawalLimitCall) {
    this._call = call;
  }
}

export class HandleOracleReportCall extends ethereum.Call {
  get inputs(): HandleOracleReportCall__Inputs {
    return new HandleOracleReportCall__Inputs(this);
  }

  get outputs(): HandleOracleReportCall__Outputs {
    return new HandleOracleReportCall__Outputs(this);
  }
}

export class HandleOracleReportCall__Inputs {
  _call: HandleOracleReportCall;

  constructor(call: HandleOracleReportCall) {
    this._call = call;
  }

  get _beaconValidators(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _beaconBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class HandleOracleReportCall__Outputs {
  _call: HandleOracleReportCall;

  constructor(call: HandleOracleReportCall) {
    this._call = call;
  }
}

export class ResumeStakingCall extends ethereum.Call {
  get inputs(): ResumeStakingCall__Inputs {
    return new ResumeStakingCall__Inputs(this);
  }

  get outputs(): ResumeStakingCall__Outputs {
    return new ResumeStakingCall__Outputs(this);
  }
}

export class ResumeStakingCall__Inputs {
  _call: ResumeStakingCall;

  constructor(call: ResumeStakingCall) {
    this._call = call;
  }
}

export class ResumeStakingCall__Outputs {
  _call: ResumeStakingCall;

  constructor(call: ResumeStakingCall) {
    this._call = call;
  }
}

export class SetELRewardsVaultCall extends ethereum.Call {
  get inputs(): SetELRewardsVaultCall__Inputs {
    return new SetELRewardsVaultCall__Inputs(this);
  }

  get outputs(): SetELRewardsVaultCall__Outputs {
    return new SetELRewardsVaultCall__Outputs(this);
  }
}

export class SetELRewardsVaultCall__Inputs {
  _call: SetELRewardsVaultCall;

  constructor(call: SetELRewardsVaultCall) {
    this._call = call;
  }

  get _executionLayerRewardsVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetELRewardsVaultCall__Outputs {
  _call: SetELRewardsVaultCall;

  constructor(call: SetELRewardsVaultCall) {
    this._call = call;
  }
}

export class SetFeeDistributionCall extends ethereum.Call {
  get inputs(): SetFeeDistributionCall__Inputs {
    return new SetFeeDistributionCall__Inputs(this);
  }

  get outputs(): SetFeeDistributionCall__Outputs {
    return new SetFeeDistributionCall__Outputs(this);
  }
}

export class SetFeeDistributionCall__Inputs {
  _call: SetFeeDistributionCall;

  constructor(call: SetFeeDistributionCall) {
    this._call = call;
  }

  get _treasuryFeeBasisPoints(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _insuranceFeeBasisPoints(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _operatorsFeeBasisPoints(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class SetFeeDistributionCall__Outputs {
  _call: SetFeeDistributionCall;

  constructor(call: SetFeeDistributionCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get _feeBasisPoints(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class TransferSharesCall extends ethereum.Call {
  get inputs(): TransferSharesCall__Inputs {
    return new TransferSharesCall__Inputs(this);
  }

  get outputs(): TransferSharesCall__Outputs {
    return new TransferSharesCall__Outputs(this);
  }
}

export class TransferSharesCall__Inputs {
  _call: TransferSharesCall;

  constructor(call: TransferSharesCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sharesAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferSharesCall__Outputs {
  _call: TransferSharesCall;

  constructor(call: TransferSharesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositBufferedEtherCall extends ethereum.Call {
  get inputs(): DepositBufferedEtherCall__Inputs {
    return new DepositBufferedEtherCall__Inputs(this);
  }

  get outputs(): DepositBufferedEtherCall__Outputs {
    return new DepositBufferedEtherCall__Outputs(this);
  }
}

export class DepositBufferedEtherCall__Inputs {
  _call: DepositBufferedEtherCall;

  constructor(call: DepositBufferedEtherCall) {
    this._call = call;
  }

  get _maxDeposits(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositBufferedEtherCall__Outputs {
  _call: DepositBufferedEtherCall;

  constructor(call: DepositBufferedEtherCall) {
    this._call = call;
  }
}

export class TransferToVaultCall extends ethereum.Call {
  get inputs(): TransferToVaultCall__Inputs {
    return new TransferToVaultCall__Inputs(this);
  }

  get outputs(): TransferToVaultCall__Outputs {
    return new TransferToVaultCall__Outputs(this);
  }
}

export class TransferToVaultCall__Inputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferToVaultCall__Outputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }
}

export class SubmitCall extends ethereum.Call {
  get inputs(): SubmitCall__Inputs {
    return new SubmitCall__Inputs(this);
  }

  get outputs(): SubmitCall__Outputs {
    return new SubmitCall__Outputs(this);
  }
}

export class SubmitCall__Inputs {
  _call: SubmitCall;

  constructor(call: SubmitCall) {
    this._call = call;
  }

  get _referral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SubmitCall__Outputs {
  _call: SubmitCall;

  constructor(call: SubmitCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveStakingLimitCall extends ethereum.Call {
  get inputs(): RemoveStakingLimitCall__Inputs {
    return new RemoveStakingLimitCall__Inputs(this);
  }

  get outputs(): RemoveStakingLimitCall__Outputs {
    return new RemoveStakingLimitCall__Outputs(this);
  }
}

export class RemoveStakingLimitCall__Inputs {
  _call: RemoveStakingLimitCall;

  constructor(call: RemoveStakingLimitCall) {
    this._call = call;
  }
}

export class RemoveStakingLimitCall__Outputs {
  _call: RemoveStakingLimitCall;

  constructor(call: RemoveStakingLimitCall) {
    this._call = call;
  }
}

export class SetProtocolContractsCall extends ethereum.Call {
  get inputs(): SetProtocolContractsCall__Inputs {
    return new SetProtocolContractsCall__Inputs(this);
  }

  get outputs(): SetProtocolContractsCall__Outputs {
    return new SetProtocolContractsCall__Outputs(this);
  }
}

export class SetProtocolContractsCall__Inputs {
  _call: SetProtocolContractsCall;

  constructor(call: SetProtocolContractsCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _insuranceFund(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetProtocolContractsCall__Outputs {
  _call: SetProtocolContractsCall;

  constructor(call: SetProtocolContractsCall) {
    this._call = call;
  }
}

export class SetWithdrawalCredentialsCall extends ethereum.Call {
  get inputs(): SetWithdrawalCredentialsCall__Inputs {
    return new SetWithdrawalCredentialsCall__Inputs(this);
  }

  get outputs(): SetWithdrawalCredentialsCall__Outputs {
    return new SetWithdrawalCredentialsCall__Outputs(this);
  }
}

export class SetWithdrawalCredentialsCall__Inputs {
  _call: SetWithdrawalCredentialsCall;

  constructor(call: SetWithdrawalCredentialsCall) {
    this._call = call;
  }

  get _withdrawalCredentials(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetWithdrawalCredentialsCall__Outputs {
  _call: SetWithdrawalCredentialsCall;

  constructor(call: SetWithdrawalCredentialsCall) {
    this._call = call;
  }
}

export class DepositBufferedEther1Call extends ethereum.Call {
  get inputs(): DepositBufferedEther1Call__Inputs {
    return new DepositBufferedEther1Call__Inputs(this);
  }

  get outputs(): DepositBufferedEther1Call__Outputs {
    return new DepositBufferedEther1Call__Outputs(this);
  }
}

export class DepositBufferedEther1Call__Inputs {
  _call: DepositBufferedEther1Call;

  constructor(call: DepositBufferedEther1Call) {
    this._call = call;
  }
}

export class DepositBufferedEther1Call__Outputs {
  _call: DepositBufferedEther1Call;

  constructor(call: DepositBufferedEther1Call) {
    this._call = call;
  }
}

export class BurnSharesCall extends ethereum.Call {
  get inputs(): BurnSharesCall__Inputs {
    return new BurnSharesCall__Inputs(this);
  }

  get outputs(): BurnSharesCall__Outputs {
    return new BurnSharesCall__Outputs(this);
  }
}

export class BurnSharesCall__Inputs {
  _call: BurnSharesCall;

  constructor(call: BurnSharesCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sharesAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnSharesCall__Outputs {
  _call: BurnSharesCall;

  constructor(call: BurnSharesCall) {
    this._call = call;
  }

  get newTotalShares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PauseStakingCall extends ethereum.Call {
  get inputs(): PauseStakingCall__Inputs {
    return new PauseStakingCall__Inputs(this);
  }

  get outputs(): PauseStakingCall__Outputs {
    return new PauseStakingCall__Outputs(this);
  }
}

export class PauseStakingCall__Inputs {
  _call: PauseStakingCall;

  constructor(call: PauseStakingCall) {
    this._call = call;
  }
}

export class PauseStakingCall__Outputs {
  _call: PauseStakingCall;

  constructor(call: PauseStakingCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}
