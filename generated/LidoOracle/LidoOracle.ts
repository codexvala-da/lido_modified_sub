// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ScriptResult extends ethereum.Event {
  get params(): ScriptResult__Params {
    return new ScriptResult__Params(this);
  }
}

export class ScriptResult__Params {
  _event: ScriptResult;

  constructor(event: ScriptResult) {
    this._event = event;
  }

  get executor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get script(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get input(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get returnData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class RecoverToVault extends ethereum.Event {
  get params(): RecoverToVault__Params {
    return new RecoverToVault__Params(this);
  }
}

export class RecoverToVault__Params {
  _event: RecoverToVault;

  constructor(event: RecoverToVault) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AllowedBeaconBalanceAnnualRelativeIncreaseSet extends ethereum.Event {
  get params(): AllowedBeaconBalanceAnnualRelativeIncreaseSet__Params {
    return new AllowedBeaconBalanceAnnualRelativeIncreaseSet__Params(this);
  }
}

export class AllowedBeaconBalanceAnnualRelativeIncreaseSet__Params {
  _event: AllowedBeaconBalanceAnnualRelativeIncreaseSet;

  constructor(event: AllowedBeaconBalanceAnnualRelativeIncreaseSet) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AllowedBeaconBalanceRelativeDecreaseSet extends ethereum.Event {
  get params(): AllowedBeaconBalanceRelativeDecreaseSet__Params {
    return new AllowedBeaconBalanceRelativeDecreaseSet__Params(this);
  }
}

export class AllowedBeaconBalanceRelativeDecreaseSet__Params {
  _event: AllowedBeaconBalanceRelativeDecreaseSet;

  constructor(event: AllowedBeaconBalanceRelativeDecreaseSet) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class BeaconReportReceiverSet extends ethereum.Event {
  get params(): BeaconReportReceiverSet__Params {
    return new BeaconReportReceiverSet__Params(this);
  }
}

export class BeaconReportReceiverSet__Params {
  _event: BeaconReportReceiverSet;

  constructor(event: BeaconReportReceiverSet) {
    this._event = event;
  }

  get callback(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MemberAdded extends ethereum.Event {
  get params(): MemberAdded__Params {
    return new MemberAdded__Params(this);
  }
}

export class MemberAdded__Params {
  _event: MemberAdded;

  constructor(event: MemberAdded) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MemberRemoved extends ethereum.Event {
  get params(): MemberRemoved__Params {
    return new MemberRemoved__Params(this);
  }
}

export class MemberRemoved__Params {
  _event: MemberRemoved;

  constructor(event: MemberRemoved) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class QuorumChanged extends ethereum.Event {
  get params(): QuorumChanged__Params {
    return new QuorumChanged__Params(this);
  }
}

export class QuorumChanged__Params {
  _event: QuorumChanged;

  constructor(event: QuorumChanged) {
    this._event = event;
  }

  get quorum(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ExpectedEpochIdUpdated extends ethereum.Event {
  get params(): ExpectedEpochIdUpdated__Params {
    return new ExpectedEpochIdUpdated__Params(this);
  }
}

export class ExpectedEpochIdUpdated__Params {
  _event: ExpectedEpochIdUpdated;

  constructor(event: ExpectedEpochIdUpdated) {
    this._event = event;
  }

  get epochId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class BeaconSpecSet extends ethereum.Event {
  get params(): BeaconSpecSet__Params {
    return new BeaconSpecSet__Params(this);
  }
}

export class BeaconSpecSet__Params {
  _event: BeaconSpecSet;

  constructor(event: BeaconSpecSet) {
    this._event = event;
  }

  get epochsPerFrame(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get slotsPerEpoch(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get secondsPerSlot(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get genesisTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BeaconReported extends ethereum.Event {
  get params(): BeaconReported__Params {
    return new BeaconReported__Params(this);
  }
}

export class BeaconReported__Params {
  _event: BeaconReported;

  constructor(event: BeaconReported) {
    this._event = event;
  }

  get epochId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get beaconBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get beaconValidators(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Completed extends ethereum.Event {
  get params(): Completed__Params {
    return new Completed__Params(this);
  }
}

export class Completed__Params {
  _event: Completed;

  constructor(event: Completed) {
    this._event = event;
  }

  get epochId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get beaconBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get beaconValidators(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PostTotalShares extends ethereum.Event {
  get params(): PostTotalShares__Params {
    return new PostTotalShares__Params(this);
  }
}

export class PostTotalShares__Params {
  _event: PostTotalShares;

  constructor(event: PostTotalShares) {
    this._event = event;
  }

  get postTotalPooledEther(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get preTotalPooledEther(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timeElapsed(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalShares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ContractVersionSet extends ethereum.Event {
  get params(): ContractVersionSet__Params {
    return new ContractVersionSet__Params(this);
  }
}

export class ContractVersionSet__Params {
  _event: ContractVersionSet;

  constructor(event: ContractVersionSet) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LidoOracle__getLastCompletedReportDeltaResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getPostTotalPooledEther(): BigInt {
    return this.value0;
  }

  getPreTotalPooledEther(): BigInt {
    return this.value1;
  }

  getTimeElapsed(): BigInt {
    return this.value2;
  }
}

export class LidoOracle__getCurrentFrameResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getFrameEpochId(): BigInt {
    return this.value0;
  }

  getFrameStartTime(): BigInt {
    return this.value1;
  }

  getFrameEndTime(): BigInt {
    return this.value2;
  }
}

export class LidoOracle__getCurrentReportVariantResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;

  constructor(value0: BigInt, value1: BigInt, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    return map;
  }

  getBeaconBalance(): BigInt {
    return this.value0;
  }

  getBeaconValidators(): BigInt {
    return this.value1;
  }

  getCount(): i32 {
    return this.value2;
  }
}

export class LidoOracle__getBeaconSpecResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getEpochsPerFrame(): BigInt {
    return this.value0;
  }

  getSlotsPerEpoch(): BigInt {
    return this.value1;
  }

  getSecondsPerSlot(): BigInt {
    return this.value2;
  }

  getGenesisTime(): BigInt {
    return this.value3;
  }
}

export class LidoOracle extends ethereum.SmartContract {
  static bind(address: Address): LidoOracle {
    return new LidoOracle("LidoOracle", address);
  }

  getCurrentOraclesReportStatus(): BigInt {
    let result = super.call(
      "getCurrentOraclesReportStatus",
      "getCurrentOraclesReportStatus():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentOraclesReportStatus(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentOraclesReportStatus",
      "getCurrentOraclesReportStatus():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasInitialized(): boolean {
    let result = super.call("hasInitialized", "hasInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_hasInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasInitialized", "hasInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getVersion(): BigInt {
    let result = super.call("getVersion", "getVersion():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getVersion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getVersion", "getVersion():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEVMScriptExecutor(_script: Bytes): Address {
    let result = super.call(
      "getEVMScriptExecutor",
      "getEVMScriptExecutor(bytes):(address)",
      [ethereum.Value.fromBytes(_script)]
    );

    return result[0].toAddress();
  }

  try_getEVMScriptExecutor(_script: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEVMScriptExecutor",
      "getEVMScriptExecutor(bytes):(address)",
      [ethereum.Value.fromBytes(_script)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MANAGE_QUORUM(): Bytes {
    let result = super.call("MANAGE_QUORUM", "MANAGE_QUORUM():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MANAGE_QUORUM(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "MANAGE_QUORUM",
      "MANAGE_QUORUM():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRecoveryVault(): Address {
    let result = super.call(
      "getRecoveryVault",
      "getRecoveryVault():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getRecoveryVault(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRecoveryVault",
      "getRecoveryVault():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllowedBeaconBalanceAnnualRelativeIncrease(): BigInt {
    let result = super.call(
      "getAllowedBeaconBalanceAnnualRelativeIncrease",
      "getAllowedBeaconBalanceAnnualRelativeIncrease():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAllowedBeaconBalanceAnnualRelativeIncrease(): ethereum.CallResult<
    BigInt
  > {
    let result = super.tryCall(
      "getAllowedBeaconBalanceAnnualRelativeIncrease",
      "getAllowedBeaconBalanceAnnualRelativeIncrease():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllowedBeaconBalanceRelativeDecrease(): BigInt {
    let result = super.call(
      "getAllowedBeaconBalanceRelativeDecrease",
      "getAllowedBeaconBalanceRelativeDecrease():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAllowedBeaconBalanceRelativeDecrease(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAllowedBeaconBalanceRelativeDecrease",
      "getAllowedBeaconBalanceRelativeDecrease():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExpectedEpochId(): BigInt {
    let result = super.call(
      "getExpectedEpochId",
      "getExpectedEpochId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getExpectedEpochId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExpectedEpochId",
      "getExpectedEpochId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastCompletedReportDelta(): LidoOracle__getLastCompletedReportDeltaResult {
    let result = super.call(
      "getLastCompletedReportDelta",
      "getLastCompletedReportDelta():(uint256,uint256,uint256)",
      []
    );

    return new LidoOracle__getLastCompletedReportDeltaResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getLastCompletedReportDelta(): ethereum.CallResult<
    LidoOracle__getLastCompletedReportDeltaResult
  > {
    let result = super.tryCall(
      "getLastCompletedReportDelta",
      "getLastCompletedReportDelta():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LidoOracle__getLastCompletedReportDeltaResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getLido(): Address {
    let result = super.call("getLido", "getLido():(address)", []);

    return result[0].toAddress();
  }

  try_getLido(): ethereum.CallResult<Address> {
    let result = super.tryCall("getLido", "getLido():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SET_BEACON_REPORT_RECEIVER(): Bytes {
    let result = super.call(
      "SET_BEACON_REPORT_RECEIVER",
      "SET_BEACON_REPORT_RECEIVER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_SET_BEACON_REPORT_RECEIVER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SET_BEACON_REPORT_RECEIVER",
      "SET_BEACON_REPORT_RECEIVER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MANAGE_MEMBERS(): Bytes {
    let result = super.call("MANAGE_MEMBERS", "MANAGE_MEMBERS():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MANAGE_MEMBERS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "MANAGE_MEMBERS",
      "MANAGE_MEMBERS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getCurrentFrame(): LidoOracle__getCurrentFrameResult {
    let result = super.call(
      "getCurrentFrame",
      "getCurrentFrame():(uint256,uint256,uint256)",
      []
    );

    return new LidoOracle__getCurrentFrameResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getCurrentFrame(): ethereum.CallResult<
    LidoOracle__getCurrentFrameResult
  > {
    let result = super.tryCall(
      "getCurrentFrame",
      "getCurrentFrame():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LidoOracle__getCurrentFrameResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  allowRecoverability(token: Address): boolean {
    let result = super.call(
      "allowRecoverability",
      "allowRecoverability(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBoolean();
  }

  try_allowRecoverability(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowRecoverability",
      "allowRecoverability(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCurrentReportVariant(
    _index: BigInt
  ): LidoOracle__getCurrentReportVariantResult {
    let result = super.call(
      "getCurrentReportVariant",
      "getCurrentReportVariant(uint256):(uint64,uint32,uint16)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return new LidoOracle__getCurrentReportVariantResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32()
    );
  }

  try_getCurrentReportVariant(
    _index: BigInt
  ): ethereum.CallResult<LidoOracle__getCurrentReportVariantResult> {
    let result = super.tryCall(
      "getCurrentReportVariant",
      "getCurrentReportVariant(uint256):(uint64,uint32,uint16)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LidoOracle__getCurrentReportVariantResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32()
      )
    );
  }

  appId(): Bytes {
    let result = super.call("appId", "appId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_appId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("appId", "appId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getLastCompletedEpochId(): BigInt {
    let result = super.call(
      "getLastCompletedEpochId",
      "getLastCompletedEpochId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLastCompletedEpochId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastCompletedEpochId",
      "getLastCompletedEpochId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInitializationBlock(): BigInt {
    let result = super.call(
      "getInitializationBlock",
      "getInitializationBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getInitializationBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInitializationBlock",
      "getInitializationBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SET_BEACON_SPEC(): Bytes {
    let result = super.call(
      "SET_BEACON_SPEC",
      "SET_BEACON_SPEC():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_SET_BEACON_SPEC(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SET_BEACON_SPEC",
      "SET_BEACON_SPEC():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  canPerform(_sender: Address, _role: Bytes, _params: Array<BigInt>): boolean {
    let result = super.call(
      "canPerform",
      "canPerform(address,bytes32,uint256[]):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromFixedBytes(_role),
        ethereum.Value.fromUnsignedBigIntArray(_params)
      ]
    );

    return result[0].toBoolean();
  }

  try_canPerform(
    _sender: Address,
    _role: Bytes,
    _params: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canPerform",
      "canPerform(address,bytes32,uint256[]):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromFixedBytes(_role),
        ethereum.Value.fromUnsignedBigIntArray(_params)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCurrentEpochId(): BigInt {
    let result = super.call(
      "getCurrentEpochId",
      "getCurrentEpochId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentEpochId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentEpochId",
      "getCurrentEpochId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEVMScriptRegistry(): Address {
    let result = super.call(
      "getEVMScriptRegistry",
      "getEVMScriptRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getEVMScriptRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEVMScriptRegistry",
      "getEVMScriptRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBeaconReportReceiver(): Address {
    let result = super.call(
      "getBeaconReportReceiver",
      "getBeaconReportReceiver():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getBeaconReportReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getBeaconReportReceiver",
      "getBeaconReportReceiver():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SET_REPORT_BOUNDARIES(): Bytes {
    let result = super.call(
      "SET_REPORT_BOUNDARIES",
      "SET_REPORT_BOUNDARIES():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_SET_REPORT_BOUNDARIES(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SET_REPORT_BOUNDARIES",
      "SET_REPORT_BOUNDARIES():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getQuorum(): BigInt {
    let result = super.call("getQuorum", "getQuorum():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getQuorum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getQuorum", "getQuorum():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  kernel(): Address {
    let result = super.call("kernel", "kernel():(address)", []);

    return result[0].toAddress();
  }

  try_kernel(): ethereum.CallResult<Address> {
    let result = super.tryCall("kernel", "kernel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOracleMembers(): Array<Address> {
    let result = super.call(
      "getOracleMembers",
      "getOracleMembers():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getOracleMembers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getOracleMembers",
      "getOracleMembers():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  isPetrified(): boolean {
    let result = super.call("isPetrified", "isPetrified():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPetrified(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPetrified", "isPetrified():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBeaconSpec(): LidoOracle__getBeaconSpecResult {
    let result = super.call(
      "getBeaconSpec",
      "getBeaconSpec():(uint64,uint64,uint64,uint64)",
      []
    );

    return new LidoOracle__getBeaconSpecResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getBeaconSpec(): ethereum.CallResult<LidoOracle__getBeaconSpecResult> {
    let result = super.tryCall(
      "getBeaconSpec",
      "getBeaconSpec():(uint64,uint64,uint64,uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LidoOracle__getBeaconSpecResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  MAX_MEMBERS(): BigInt {
    let result = super.call("MAX_MEMBERS", "MAX_MEMBERS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_MEMBERS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_MEMBERS", "MAX_MEMBERS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentReportVariantsSize(): BigInt {
    let result = super.call(
      "getCurrentReportVariantsSize",
      "getCurrentReportVariantsSize():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentReportVariantsSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentReportVariantsSize",
      "getCurrentReportVariantsSize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class SetAllowedBeaconBalanceAnnualRelativeIncreaseCall extends ethereum.Call {
  get inputs(): SetAllowedBeaconBalanceAnnualRelativeIncreaseCall__Inputs {
    return new SetAllowedBeaconBalanceAnnualRelativeIncreaseCall__Inputs(this);
  }

  get outputs(): SetAllowedBeaconBalanceAnnualRelativeIncreaseCall__Outputs {
    return new SetAllowedBeaconBalanceAnnualRelativeIncreaseCall__Outputs(this);
  }
}

export class SetAllowedBeaconBalanceAnnualRelativeIncreaseCall__Inputs {
  _call: SetAllowedBeaconBalanceAnnualRelativeIncreaseCall;

  constructor(call: SetAllowedBeaconBalanceAnnualRelativeIncreaseCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAllowedBeaconBalanceAnnualRelativeIncreaseCall__Outputs {
  _call: SetAllowedBeaconBalanceAnnualRelativeIncreaseCall;

  constructor(call: SetAllowedBeaconBalanceAnnualRelativeIncreaseCall) {
    this._call = call;
  }
}

export class ReportBeaconCall extends ethereum.Call {
  get inputs(): ReportBeaconCall__Inputs {
    return new ReportBeaconCall__Inputs(this);
  }

  get outputs(): ReportBeaconCall__Outputs {
    return new ReportBeaconCall__Outputs(this);
  }
}

export class ReportBeaconCall__Inputs {
  _call: ReportBeaconCall;

  constructor(call: ReportBeaconCall) {
    this._call = call;
  }

  get _epochId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _beaconBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _beaconValidators(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ReportBeaconCall__Outputs {
  _call: ReportBeaconCall;

  constructor(call: ReportBeaconCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _lido(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _epochsPerFrame(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _slotsPerEpoch(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _secondsPerSlot(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _genesisTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _allowedBeaconBalanceAnnualRelativeIncrease(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _allowedBeaconBalanceRelativeDecrease(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class FinalizeUpgrade_v3Call extends ethereum.Call {
  get inputs(): FinalizeUpgrade_v3Call__Inputs {
    return new FinalizeUpgrade_v3Call__Inputs(this);
  }

  get outputs(): FinalizeUpgrade_v3Call__Outputs {
    return new FinalizeUpgrade_v3Call__Outputs(this);
  }
}

export class FinalizeUpgrade_v3Call__Inputs {
  _call: FinalizeUpgrade_v3Call;

  constructor(call: FinalizeUpgrade_v3Call) {
    this._call = call;
  }
}

export class FinalizeUpgrade_v3Call__Outputs {
  _call: FinalizeUpgrade_v3Call;

  constructor(call: FinalizeUpgrade_v3Call) {
    this._call = call;
  }
}

export class SetBeaconReportReceiverCall extends ethereum.Call {
  get inputs(): SetBeaconReportReceiverCall__Inputs {
    return new SetBeaconReportReceiverCall__Inputs(this);
  }

  get outputs(): SetBeaconReportReceiverCall__Outputs {
    return new SetBeaconReportReceiverCall__Outputs(this);
  }
}

export class SetBeaconReportReceiverCall__Inputs {
  _call: SetBeaconReportReceiverCall;

  constructor(call: SetBeaconReportReceiverCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBeaconReportReceiverCall__Outputs {
  _call: SetBeaconReportReceiverCall;

  constructor(call: SetBeaconReportReceiverCall) {
    this._call = call;
  }
}

export class TransferToVaultCall extends ethereum.Call {
  get inputs(): TransferToVaultCall__Inputs {
    return new TransferToVaultCall__Inputs(this);
  }

  get outputs(): TransferToVaultCall__Outputs {
    return new TransferToVaultCall__Outputs(this);
  }
}

export class TransferToVaultCall__Inputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferToVaultCall__Outputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }
}

export class AddOracleMemberCall extends ethereum.Call {
  get inputs(): AddOracleMemberCall__Inputs {
    return new AddOracleMemberCall__Inputs(this);
  }

  get outputs(): AddOracleMemberCall__Outputs {
    return new AddOracleMemberCall__Outputs(this);
  }
}

export class AddOracleMemberCall__Inputs {
  _call: AddOracleMemberCall;

  constructor(call: AddOracleMemberCall) {
    this._call = call;
  }

  get _member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddOracleMemberCall__Outputs {
  _call: AddOracleMemberCall;

  constructor(call: AddOracleMemberCall) {
    this._call = call;
  }
}

export class SetQuorumCall extends ethereum.Call {
  get inputs(): SetQuorumCall__Inputs {
    return new SetQuorumCall__Inputs(this);
  }

  get outputs(): SetQuorumCall__Outputs {
    return new SetQuorumCall__Outputs(this);
  }
}

export class SetQuorumCall__Inputs {
  _call: SetQuorumCall;

  constructor(call: SetQuorumCall) {
    this._call = call;
  }

  get _quorum(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetQuorumCall__Outputs {
  _call: SetQuorumCall;

  constructor(call: SetQuorumCall) {
    this._call = call;
  }
}

export class SetAllowedBeaconBalanceRelativeDecreaseCall extends ethereum.Call {
  get inputs(): SetAllowedBeaconBalanceRelativeDecreaseCall__Inputs {
    return new SetAllowedBeaconBalanceRelativeDecreaseCall__Inputs(this);
  }

  get outputs(): SetAllowedBeaconBalanceRelativeDecreaseCall__Outputs {
    return new SetAllowedBeaconBalanceRelativeDecreaseCall__Outputs(this);
  }
}

export class SetAllowedBeaconBalanceRelativeDecreaseCall__Inputs {
  _call: SetAllowedBeaconBalanceRelativeDecreaseCall;

  constructor(call: SetAllowedBeaconBalanceRelativeDecreaseCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAllowedBeaconBalanceRelativeDecreaseCall__Outputs {
  _call: SetAllowedBeaconBalanceRelativeDecreaseCall;

  constructor(call: SetAllowedBeaconBalanceRelativeDecreaseCall) {
    this._call = call;
  }
}

export class SetBeaconSpecCall extends ethereum.Call {
  get inputs(): SetBeaconSpecCall__Inputs {
    return new SetBeaconSpecCall__Inputs(this);
  }

  get outputs(): SetBeaconSpecCall__Outputs {
    return new SetBeaconSpecCall__Outputs(this);
  }
}

export class SetBeaconSpecCall__Inputs {
  _call: SetBeaconSpecCall;

  constructor(call: SetBeaconSpecCall) {
    this._call = call;
  }

  get _epochsPerFrame(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _slotsPerEpoch(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _secondsPerSlot(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _genesisTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetBeaconSpecCall__Outputs {
  _call: SetBeaconSpecCall;

  constructor(call: SetBeaconSpecCall) {
    this._call = call;
  }
}

export class RemoveOracleMemberCall extends ethereum.Call {
  get inputs(): RemoveOracleMemberCall__Inputs {
    return new RemoveOracleMemberCall__Inputs(this);
  }

  get outputs(): RemoveOracleMemberCall__Outputs {
    return new RemoveOracleMemberCall__Outputs(this);
  }
}

export class RemoveOracleMemberCall__Inputs {
  _call: RemoveOracleMemberCall;

  constructor(call: RemoveOracleMemberCall) {
    this._call = call;
  }

  get _member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveOracleMemberCall__Outputs {
  _call: RemoveOracleMemberCall;

  constructor(call: RemoveOracleMemberCall) {
    this._call = call;
  }
}
