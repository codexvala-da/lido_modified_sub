// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ScriptResult extends ethereum.Event {
  get params(): ScriptResult__Params {
    return new ScriptResult__Params(this);
  }
}

export class ScriptResult__Params {
  _event: ScriptResult;

  constructor(event: ScriptResult) {
    this._event = event;
  }

  get executor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get script(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get input(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get returnData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class RecoverToVault extends ethereum.Event {
  get params(): RecoverToVault__Params {
    return new RecoverToVault__Params(this);
  }
}

export class RecoverToVault__Params {
  _event: RecoverToVault;

  constructor(event: RecoverToVault) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NodeOperatorAdded extends ethereum.Event {
  get params(): NodeOperatorAdded__Params {
    return new NodeOperatorAdded__Params(this);
  }
}

export class NodeOperatorAdded__Params {
  _event: NodeOperatorAdded;

  constructor(event: NodeOperatorAdded) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get rewardAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get stakingLimit(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NodeOperatorActiveSet extends ethereum.Event {
  get params(): NodeOperatorActiveSet__Params {
    return new NodeOperatorActiveSet__Params(this);
  }
}

export class NodeOperatorActiveSet__Params {
  _event: NodeOperatorActiveSet;

  constructor(event: NodeOperatorActiveSet) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get active(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class NodeOperatorNameSet extends ethereum.Event {
  get params(): NodeOperatorNameSet__Params {
    return new NodeOperatorNameSet__Params(this);
  }
}

export class NodeOperatorNameSet__Params {
  _event: NodeOperatorNameSet;

  constructor(event: NodeOperatorNameSet) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class NodeOperatorRewardAddressSet extends ethereum.Event {
  get params(): NodeOperatorRewardAddressSet__Params {
    return new NodeOperatorRewardAddressSet__Params(this);
  }
}

export class NodeOperatorRewardAddressSet__Params {
  _event: NodeOperatorRewardAddressSet;

  constructor(event: NodeOperatorRewardAddressSet) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rewardAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NodeOperatorStakingLimitSet extends ethereum.Event {
  get params(): NodeOperatorStakingLimitSet__Params {
    return new NodeOperatorStakingLimitSet__Params(this);
  }
}

export class NodeOperatorStakingLimitSet__Params {
  _event: NodeOperatorStakingLimitSet;

  constructor(event: NodeOperatorStakingLimitSet) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stakingLimit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NodeOperatorTotalStoppedValidatorsReported extends ethereum.Event {
  get params(): NodeOperatorTotalStoppedValidatorsReported__Params {
    return new NodeOperatorTotalStoppedValidatorsReported__Params(this);
  }
}

export class NodeOperatorTotalStoppedValidatorsReported__Params {
  _event: NodeOperatorTotalStoppedValidatorsReported;

  constructor(event: NodeOperatorTotalStoppedValidatorsReported) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalStopped(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NodeOperatorTotalKeysTrimmed extends ethereum.Event {
  get params(): NodeOperatorTotalKeysTrimmed__Params {
    return new NodeOperatorTotalKeysTrimmed__Params(this);
  }
}

export class NodeOperatorTotalKeysTrimmed__Params {
  _event: NodeOperatorTotalKeysTrimmed;

  constructor(event: NodeOperatorTotalKeysTrimmed) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalKeysTrimmed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SigningKeyAdded extends ethereum.Event {
  get params(): SigningKeyAdded__Params {
    return new SigningKeyAdded__Params(this);
  }
}

export class SigningKeyAdded__Params {
  _event: SigningKeyAdded;

  constructor(event: SigningKeyAdded) {
    this._event = event;
  }

  get operatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get pubkey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class SigningKeyRemoved extends ethereum.Event {
  get params(): SigningKeyRemoved__Params {
    return new SigningKeyRemoved__Params(this);
  }
}

export class SigningKeyRemoved__Params {
  _event: SigningKeyRemoved;

  constructor(event: SigningKeyRemoved) {
    this._event = event;
  }

  get operatorId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get pubkey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class KeysOpIndexSet extends ethereum.Event {
  get params(): KeysOpIndexSet__Params {
    return new KeysOpIndexSet__Params(this);
  }
}

export class KeysOpIndexSet__Params {
  _event: KeysOpIndexSet;

  constructor(event: KeysOpIndexSet) {
    this._event = event;
  }

  get keysOpIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NodeOperatorsRegistry__assignNextSigningKeysResult {
  value0: Bytes;
  value1: Bytes;

  constructor(value0: Bytes, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBytes(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getPubkeys(): Bytes {
    return this.value0;
  }

  getSignatures(): Bytes {
    return this.value1;
  }
}

export class NodeOperatorsRegistry__getRewardsDistributionResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getRecipients(): Array<Address> {
    return this.value0;
  }

  getShares(): Array<BigInt> {
    return this.value1;
  }
}

export class NodeOperatorsRegistry__getNodeOperatorResult {
  value0: boolean;
  value1: string;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: boolean,
    value1: string,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getActive(): boolean {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getRewardAddress(): Address {
    return this.value2;
  }

  getStakingLimit(): BigInt {
    return this.value3;
  }

  getStoppedValidators(): BigInt {
    return this.value4;
  }

  getTotalSigningKeys(): BigInt {
    return this.value5;
  }

  getUsedSigningKeys(): BigInt {
    return this.value6;
  }
}

export class NodeOperatorsRegistry__getSigningKeyResult {
  value0: Bytes;
  value1: Bytes;
  value2: boolean;

  constructor(value0: Bytes, value1: Bytes, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBytes(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  getKey(): Bytes {
    return this.value0;
  }

  getDepositSignature(): Bytes {
    return this.value1;
  }

  getUsed(): boolean {
    return this.value2;
  }
}

export class NodeOperatorsRegistry extends ethereum.SmartContract {
  static bind(address: Address): NodeOperatorsRegistry {
    return new NodeOperatorsRegistry("NodeOperatorsRegistry", address);
  }

  hasInitialized(): boolean {
    let result = super.call("hasInitialized", "hasInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_hasInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasInitialized", "hasInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getEVMScriptExecutor(_script: Bytes): Address {
    let result = super.call(
      "getEVMScriptExecutor",
      "getEVMScriptExecutor(bytes):(address)",
      [ethereum.Value.fromBytes(_script)]
    );

    return result[0].toAddress();
  }

  try_getEVMScriptExecutor(_script: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEVMScriptExecutor",
      "getEVMScriptExecutor(bytes):(address)",
      [ethereum.Value.fromBytes(_script)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRecoveryVault(): Address {
    let result = super.call(
      "getRecoveryVault",
      "getRecoveryVault():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getRecoveryVault(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRecoveryVault",
      "getRecoveryVault():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assignNextSigningKeys(
    _numKeys: BigInt
  ): NodeOperatorsRegistry__assignNextSigningKeysResult {
    let result = super.call(
      "assignNextSigningKeys",
      "assignNextSigningKeys(uint256):(bytes,bytes)",
      [ethereum.Value.fromUnsignedBigInt(_numKeys)]
    );

    return new NodeOperatorsRegistry__assignNextSigningKeysResult(
      result[0].toBytes(),
      result[1].toBytes()
    );
  }

  try_assignNextSigningKeys(
    _numKeys: BigInt
  ): ethereum.CallResult<NodeOperatorsRegistry__assignNextSigningKeysResult> {
    let result = super.tryCall(
      "assignNextSigningKeys",
      "assignNextSigningKeys(uint256):(bytes,bytes)",
      [ethereum.Value.fromUnsignedBigInt(_numKeys)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NodeOperatorsRegistry__assignNextSigningKeysResult(
        value[0].toBytes(),
        value[1].toBytes()
      )
    );
  }

  SIGNATURE_LENGTH(): BigInt {
    let result = super.call(
      "SIGNATURE_LENGTH",
      "SIGNATURE_LENGTH():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SIGNATURE_LENGTH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SIGNATURE_LENGTH",
      "SIGNATURE_LENGTH():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SET_NODE_OPERATOR_ADDRESS_ROLE(): Bytes {
    let result = super.call(
      "SET_NODE_OPERATOR_ADDRESS_ROLE",
      "SET_NODE_OPERATOR_ADDRESS_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_SET_NODE_OPERATOR_ADDRESS_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SET_NODE_OPERATOR_ADDRESS_ROLE",
      "SET_NODE_OPERATOR_ADDRESS_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRewardsDistribution(
    _totalRewardShares: BigInt
  ): NodeOperatorsRegistry__getRewardsDistributionResult {
    let result = super.call(
      "getRewardsDistribution",
      "getRewardsDistribution(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_totalRewardShares)]
    );

    return new NodeOperatorsRegistry__getRewardsDistributionResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getRewardsDistribution(
    _totalRewardShares: BigInt
  ): ethereum.CallResult<NodeOperatorsRegistry__getRewardsDistributionResult> {
    let result = super.tryCall(
      "getRewardsDistribution",
      "getRewardsDistribution(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_totalRewardShares)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NodeOperatorsRegistry__getRewardsDistributionResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  SET_NODE_OPERATOR_NAME_ROLE(): Bytes {
    let result = super.call(
      "SET_NODE_OPERATOR_NAME_ROLE",
      "SET_NODE_OPERATOR_NAME_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_SET_NODE_OPERATOR_NAME_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SET_NODE_OPERATOR_NAME_ROLE",
      "SET_NODE_OPERATOR_NAME_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ADD_NODE_OPERATOR_ROLE(): Bytes {
    let result = super.call(
      "ADD_NODE_OPERATOR_ROLE",
      "ADD_NODE_OPERATOR_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ADD_NODE_OPERATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ADD_NODE_OPERATOR_ROLE",
      "ADD_NODE_OPERATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowRecoverability(token: Address): boolean {
    let result = super.call(
      "allowRecoverability",
      "allowRecoverability(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBoolean();
  }

  try_allowRecoverability(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowRecoverability",
      "allowRecoverability(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  appId(): Bytes {
    let result = super.call("appId", "appId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_appId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("appId", "appId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getActiveNodeOperatorsCount(): BigInt {
    let result = super.call(
      "getActiveNodeOperatorsCount",
      "getActiveNodeOperatorsCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getActiveNodeOperatorsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getActiveNodeOperatorsCount",
      "getActiveNodeOperatorsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addNodeOperator(_name: string, _rewardAddress: Address): BigInt {
    let result = super.call(
      "addNodeOperator",
      "addNodeOperator(string,address):(uint256)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromAddress(_rewardAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_addNodeOperator(
    _name: string,
    _rewardAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addNodeOperator",
      "addNodeOperator(string,address):(uint256)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromAddress(_rewardAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInitializationBlock(): BigInt {
    let result = super.call(
      "getInitializationBlock",
      "getInitializationBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getInitializationBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInitializationBlock",
      "getInitializationBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnusedSigningKeyCount(_operator_id: BigInt): BigInt {
    let result = super.call(
      "getUnusedSigningKeyCount",
      "getUnusedSigningKeyCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_operator_id)]
    );

    return result[0].toBigInt();
  }

  try_getUnusedSigningKeyCount(
    _operator_id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUnusedSigningKeyCount",
      "getUnusedSigningKeyCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_operator_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNodeOperator(
    _id: BigInt,
    _fullInfo: boolean
  ): NodeOperatorsRegistry__getNodeOperatorResult {
    let result = super.call(
      "getNodeOperator",
      "getNodeOperator(uint256,bool):(bool,string,address,uint64,uint64,uint64,uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromBoolean(_fullInfo)
      ]
    );

    return new NodeOperatorsRegistry__getNodeOperatorResult(
      result[0].toBoolean(),
      result[1].toString(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_getNodeOperator(
    _id: BigInt,
    _fullInfo: boolean
  ): ethereum.CallResult<NodeOperatorsRegistry__getNodeOperatorResult> {
    let result = super.tryCall(
      "getNodeOperator",
      "getNodeOperator(uint256,bool):(bool,string,address,uint64,uint64,uint64,uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromBoolean(_fullInfo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NodeOperatorsRegistry__getNodeOperatorResult(
        value[0].toBoolean(),
        value[1].toString(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  canPerform(_sender: Address, _role: Bytes, _params: Array<BigInt>): boolean {
    let result = super.call(
      "canPerform",
      "canPerform(address,bytes32,uint256[]):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromFixedBytes(_role),
        ethereum.Value.fromUnsignedBigIntArray(_params)
      ]
    );

    return result[0].toBoolean();
  }

  try_canPerform(
    _sender: Address,
    _role: Bytes,
    _params: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canPerform",
      "canPerform(address,bytes32,uint256[]):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromFixedBytes(_role),
        ethereum.Value.fromUnsignedBigIntArray(_params)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getEVMScriptRegistry(): Address {
    let result = super.call(
      "getEVMScriptRegistry",
      "getEVMScriptRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getEVMScriptRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEVMScriptRegistry",
      "getEVMScriptRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  PUBKEY_LENGTH(): BigInt {
    let result = super.call("PUBKEY_LENGTH", "PUBKEY_LENGTH():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PUBKEY_LENGTH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PUBKEY_LENGTH",
      "PUBKEY_LENGTH():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNodeOperatorsCount(): BigInt {
    let result = super.call(
      "getNodeOperatorsCount",
      "getNodeOperatorsCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNodeOperatorsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNodeOperatorsCount",
      "getNodeOperatorsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSigningKey(
    _operator_id: BigInt,
    _index: BigInt
  ): NodeOperatorsRegistry__getSigningKeyResult {
    let result = super.call(
      "getSigningKey",
      "getSigningKey(uint256,uint256):(bytes,bytes,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_operator_id),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return new NodeOperatorsRegistry__getSigningKeyResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toBoolean()
    );
  }

  try_getSigningKey(
    _operator_id: BigInt,
    _index: BigInt
  ): ethereum.CallResult<NodeOperatorsRegistry__getSigningKeyResult> {
    let result = super.tryCall(
      "getSigningKey",
      "getSigningKey(uint256,uint256):(bytes,bytes,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_operator_id),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NodeOperatorsRegistry__getSigningKeyResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toBoolean()
      )
    );
  }

  REPORT_STOPPED_VALIDATORS_ROLE(): Bytes {
    let result = super.call(
      "REPORT_STOPPED_VALIDATORS_ROLE",
      "REPORT_STOPPED_VALIDATORS_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_REPORT_STOPPED_VALIDATORS_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "REPORT_STOPPED_VALIDATORS_ROLE",
      "REPORT_STOPPED_VALIDATORS_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getKeysOpIndex(): BigInt {
    let result = super.call("getKeysOpIndex", "getKeysOpIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getKeysOpIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getKeysOpIndex",
      "getKeysOpIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  kernel(): Address {
    let result = super.call("kernel", "kernel():(address)", []);

    return result[0].toAddress();
  }

  try_kernel(): ethereum.CallResult<Address> {
    let result = super.tryCall("kernel", "kernel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SET_NODE_OPERATOR_ACTIVE_ROLE(): Bytes {
    let result = super.call(
      "SET_NODE_OPERATOR_ACTIVE_ROLE",
      "SET_NODE_OPERATOR_ACTIVE_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_SET_NODE_OPERATOR_ACTIVE_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SET_NODE_OPERATOR_ACTIVE_ROLE",
      "SET_NODE_OPERATOR_ACTIVE_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SET_NODE_OPERATOR_LIMIT_ROLE(): Bytes {
    let result = super.call(
      "SET_NODE_OPERATOR_LIMIT_ROLE",
      "SET_NODE_OPERATOR_LIMIT_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_SET_NODE_OPERATOR_LIMIT_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SET_NODE_OPERATOR_LIMIT_ROLE",
      "SET_NODE_OPERATOR_LIMIT_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTotalSigningKeyCount(_operator_id: BigInt): BigInt {
    let result = super.call(
      "getTotalSigningKeyCount",
      "getTotalSigningKeyCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_operator_id)]
    );

    return result[0].toBigInt();
  }

  try_getTotalSigningKeyCount(
    _operator_id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalSigningKeyCount",
      "getTotalSigningKeyCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_operator_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isPetrified(): boolean {
    let result = super.call("isPetrified", "isPetrified():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPetrified(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPetrified", "isPetrified():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  MAX_NODE_OPERATORS_COUNT(): BigInt {
    let result = super.call(
      "MAX_NODE_OPERATORS_COUNT",
      "MAX_NODE_OPERATORS_COUNT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_NODE_OPERATORS_COUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_NODE_OPERATORS_COUNT",
      "MAX_NODE_OPERATORS_COUNT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MANAGE_SIGNING_KEYS(): Bytes {
    let result = super.call(
      "MANAGE_SIGNING_KEYS",
      "MANAGE_SIGNING_KEYS():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_MANAGE_SIGNING_KEYS(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "MANAGE_SIGNING_KEYS",
      "MANAGE_SIGNING_KEYS():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class AddSigningKeysCall extends ethereum.Call {
  get inputs(): AddSigningKeysCall__Inputs {
    return new AddSigningKeysCall__Inputs(this);
  }

  get outputs(): AddSigningKeysCall__Outputs {
    return new AddSigningKeysCall__Outputs(this);
  }
}

export class AddSigningKeysCall__Inputs {
  _call: AddSigningKeysCall;

  constructor(call: AddSigningKeysCall) {
    this._call = call;
  }

  get _operator_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _pubkeys(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _signatures(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class AddSigningKeysCall__Outputs {
  _call: AddSigningKeysCall;

  constructor(call: AddSigningKeysCall) {
    this._call = call;
  }
}

export class DisableNodeOperatorCall extends ethereum.Call {
  get inputs(): DisableNodeOperatorCall__Inputs {
    return new DisableNodeOperatorCall__Inputs(this);
  }

  get outputs(): DisableNodeOperatorCall__Outputs {
    return new DisableNodeOperatorCall__Outputs(this);
  }
}

export class DisableNodeOperatorCall__Inputs {
  _call: DisableNodeOperatorCall;

  constructor(call: DisableNodeOperatorCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DisableNodeOperatorCall__Outputs {
  _call: DisableNodeOperatorCall;

  constructor(call: DisableNodeOperatorCall) {
    this._call = call;
  }
}

export class AssignNextSigningKeysCall extends ethereum.Call {
  get inputs(): AssignNextSigningKeysCall__Inputs {
    return new AssignNextSigningKeysCall__Inputs(this);
  }

  get outputs(): AssignNextSigningKeysCall__Outputs {
    return new AssignNextSigningKeysCall__Outputs(this);
  }
}

export class AssignNextSigningKeysCall__Inputs {
  _call: AssignNextSigningKeysCall;

  constructor(call: AssignNextSigningKeysCall) {
    this._call = call;
  }

  get _numKeys(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AssignNextSigningKeysCall__Outputs {
  _call: AssignNextSigningKeysCall;

  constructor(call: AssignNextSigningKeysCall) {
    this._call = call;
  }

  get pubkeys(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }

  get signatures(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class RemoveSigningKeysOperatorBHCall extends ethereum.Call {
  get inputs(): RemoveSigningKeysOperatorBHCall__Inputs {
    return new RemoveSigningKeysOperatorBHCall__Inputs(this);
  }

  get outputs(): RemoveSigningKeysOperatorBHCall__Outputs {
    return new RemoveSigningKeysOperatorBHCall__Outputs(this);
  }
}

export class RemoveSigningKeysOperatorBHCall__Inputs {
  _call: RemoveSigningKeysOperatorBHCall;

  constructor(call: RemoveSigningKeysOperatorBHCall) {
    this._call = call;
  }

  get _operator_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemoveSigningKeysOperatorBHCall__Outputs {
  _call: RemoveSigningKeysOperatorBHCall;

  constructor(call: RemoveSigningKeysOperatorBHCall) {
    this._call = call;
  }
}

export class SetNodeOperatorNameCall extends ethereum.Call {
  get inputs(): SetNodeOperatorNameCall__Inputs {
    return new SetNodeOperatorNameCall__Inputs(this);
  }

  get outputs(): SetNodeOperatorNameCall__Outputs {
    return new SetNodeOperatorNameCall__Outputs(this);
  }
}

export class SetNodeOperatorNameCall__Inputs {
  _call: SetNodeOperatorNameCall;

  constructor(call: SetNodeOperatorNameCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetNodeOperatorNameCall__Outputs {
  _call: SetNodeOperatorNameCall;

  constructor(call: SetNodeOperatorNameCall) {
    this._call = call;
  }
}

export class SetNodeOperatorActiveCall extends ethereum.Call {
  get inputs(): SetNodeOperatorActiveCall__Inputs {
    return new SetNodeOperatorActiveCall__Inputs(this);
  }

  get outputs(): SetNodeOperatorActiveCall__Outputs {
    return new SetNodeOperatorActiveCall__Outputs(this);
  }
}

export class SetNodeOperatorActiveCall__Inputs {
  _call: SetNodeOperatorActiveCall;

  constructor(call: SetNodeOperatorActiveCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _active(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetNodeOperatorActiveCall__Outputs {
  _call: SetNodeOperatorActiveCall;

  constructor(call: SetNodeOperatorActiveCall) {
    this._call = call;
  }
}

export class RemoveSigningKeyCall extends ethereum.Call {
  get inputs(): RemoveSigningKeyCall__Inputs {
    return new RemoveSigningKeyCall__Inputs(this);
  }

  get outputs(): RemoveSigningKeyCall__Outputs {
    return new RemoveSigningKeyCall__Outputs(this);
  }
}

export class RemoveSigningKeyCall__Inputs {
  _call: RemoveSigningKeyCall;

  constructor(call: RemoveSigningKeyCall) {
    this._call = call;
  }

  get _operator_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveSigningKeyCall__Outputs {
  _call: RemoveSigningKeyCall;

  constructor(call: RemoveSigningKeyCall) {
    this._call = call;
  }
}

export class RemoveSigningKeysCall extends ethereum.Call {
  get inputs(): RemoveSigningKeysCall__Inputs {
    return new RemoveSigningKeysCall__Inputs(this);
  }

  get outputs(): RemoveSigningKeysCall__Outputs {
    return new RemoveSigningKeysCall__Outputs(this);
  }
}

export class RemoveSigningKeysCall__Inputs {
  _call: RemoveSigningKeysCall;

  constructor(call: RemoveSigningKeysCall) {
    this._call = call;
  }

  get _operator_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemoveSigningKeysCall__Outputs {
  _call: RemoveSigningKeysCall;

  constructor(call: RemoveSigningKeysCall) {
    this._call = call;
  }
}

export class AddSigningKeysOperatorBHCall extends ethereum.Call {
  get inputs(): AddSigningKeysOperatorBHCall__Inputs {
    return new AddSigningKeysOperatorBHCall__Inputs(this);
  }

  get outputs(): AddSigningKeysOperatorBHCall__Outputs {
    return new AddSigningKeysOperatorBHCall__Outputs(this);
  }
}

export class AddSigningKeysOperatorBHCall__Inputs {
  _call: AddSigningKeysOperatorBHCall;

  constructor(call: AddSigningKeysOperatorBHCall) {
    this._call = call;
  }

  get _operator_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _pubkeys(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _signatures(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class AddSigningKeysOperatorBHCall__Outputs {
  _call: AddSigningKeysOperatorBHCall;

  constructor(call: AddSigningKeysOperatorBHCall) {
    this._call = call;
  }
}

export class AddNodeOperatorCall extends ethereum.Call {
  get inputs(): AddNodeOperatorCall__Inputs {
    return new AddNodeOperatorCall__Inputs(this);
  }

  get outputs(): AddNodeOperatorCall__Outputs {
    return new AddNodeOperatorCall__Outputs(this);
  }
}

export class AddNodeOperatorCall__Inputs {
  _call: AddNodeOperatorCall;

  constructor(call: AddNodeOperatorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _rewardAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddNodeOperatorCall__Outputs {
  _call: AddNodeOperatorCall;

  constructor(call: AddNodeOperatorCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetNodeOperatorRewardAddressCall extends ethereum.Call {
  get inputs(): SetNodeOperatorRewardAddressCall__Inputs {
    return new SetNodeOperatorRewardAddressCall__Inputs(this);
  }

  get outputs(): SetNodeOperatorRewardAddressCall__Outputs {
    return new SetNodeOperatorRewardAddressCall__Outputs(this);
  }
}

export class SetNodeOperatorRewardAddressCall__Inputs {
  _call: SetNodeOperatorRewardAddressCall;

  constructor(call: SetNodeOperatorRewardAddressCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _rewardAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetNodeOperatorRewardAddressCall__Outputs {
  _call: SetNodeOperatorRewardAddressCall;

  constructor(call: SetNodeOperatorRewardAddressCall) {
    this._call = call;
  }
}

export class TransferToVaultCall extends ethereum.Call {
  get inputs(): TransferToVaultCall__Inputs {
    return new TransferToVaultCall__Inputs(this);
  }

  get outputs(): TransferToVaultCall__Outputs {
    return new TransferToVaultCall__Outputs(this);
  }
}

export class TransferToVaultCall__Inputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferToVaultCall__Outputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }
}

export class SetNodeOperatorStakingLimitCall extends ethereum.Call {
  get inputs(): SetNodeOperatorStakingLimitCall__Inputs {
    return new SetNodeOperatorStakingLimitCall__Inputs(this);
  }

  get outputs(): SetNodeOperatorStakingLimitCall__Outputs {
    return new SetNodeOperatorStakingLimitCall__Outputs(this);
  }
}

export class SetNodeOperatorStakingLimitCall__Inputs {
  _call: SetNodeOperatorStakingLimitCall;

  constructor(call: SetNodeOperatorStakingLimitCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stakingLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetNodeOperatorStakingLimitCall__Outputs {
  _call: SetNodeOperatorStakingLimitCall;

  constructor(call: SetNodeOperatorStakingLimitCall) {
    this._call = call;
  }
}

export class ReportStoppedValidatorsCall extends ethereum.Call {
  get inputs(): ReportStoppedValidatorsCall__Inputs {
    return new ReportStoppedValidatorsCall__Inputs(this);
  }

  get outputs(): ReportStoppedValidatorsCall__Outputs {
    return new ReportStoppedValidatorsCall__Outputs(this);
  }
}

export class ReportStoppedValidatorsCall__Inputs {
  _call: ReportStoppedValidatorsCall;

  constructor(call: ReportStoppedValidatorsCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stoppedIncrement(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReportStoppedValidatorsCall__Outputs {
  _call: ReportStoppedValidatorsCall;

  constructor(call: ReportStoppedValidatorsCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _lido(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemoveSigningKeyOperatorBHCall extends ethereum.Call {
  get inputs(): RemoveSigningKeyOperatorBHCall__Inputs {
    return new RemoveSigningKeyOperatorBHCall__Inputs(this);
  }

  get outputs(): RemoveSigningKeyOperatorBHCall__Outputs {
    return new RemoveSigningKeyOperatorBHCall__Outputs(this);
  }
}

export class RemoveSigningKeyOperatorBHCall__Inputs {
  _call: RemoveSigningKeyOperatorBHCall;

  constructor(call: RemoveSigningKeyOperatorBHCall) {
    this._call = call;
  }

  get _operator_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveSigningKeyOperatorBHCall__Outputs {
  _call: RemoveSigningKeyOperatorBHCall;

  constructor(call: RemoveSigningKeyOperatorBHCall) {
    this._call = call;
  }
}

export class TrimUnusedKeysCall extends ethereum.Call {
  get inputs(): TrimUnusedKeysCall__Inputs {
    return new TrimUnusedKeysCall__Inputs(this);
  }

  get outputs(): TrimUnusedKeysCall__Outputs {
    return new TrimUnusedKeysCall__Outputs(this);
  }
}

export class TrimUnusedKeysCall__Inputs {
  _call: TrimUnusedKeysCall;

  constructor(call: TrimUnusedKeysCall) {
    this._call = call;
  }
}

export class TrimUnusedKeysCall__Outputs {
  _call: TrimUnusedKeysCall;

  constructor(call: TrimUnusedKeysCall) {
    this._call = call;
  }
}
